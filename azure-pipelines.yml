# Use default triggering logic
# trigger: ...
# pr: ...

jobs:
  - job: 'CondaTestSuite'
    timeoutInMinutes: 90
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python27_32_unit:
          python.version: '2.7'
          conda.subdir: 'win-32'
          test.style: 'unit'
          pytest.marker: 'not integration and not installed'
        Python27_64_unit:
          python.version: '2.7'
          conda.subdir: 'win-64'
          test.style: 'unit'
          pytest.marker: 'not integration and not installed'
        Python37_32_unit:
          python.version: '3.7'
          conda.subdir: 'win-32'
          test.style: 'unit'
          pytest.marker: 'not integration and not installed'
        Python37_64_unit:
          python.version: '3.7'
          conda.subdir: 'win-64'
          test.style: 'unit'
          pytest.marker: 'not integration and not installed'
        Python27_32_integration:
          python.version: '2.7'
          conda.subdir: 'win-32'
          test.style: 'integration'
          pytest.marker: 'integration and not installed'
        Python27_64_integration:
          python.version: '2.7'
          conda.subdir: 'win-64'
          test.style: 'integration'
          pytest.marker: 'integration and not installed'
        Python37_32_integration:
          python.version: '3.7'
          conda.subdir: 'win-32'
          test.style: 'integration'
          pytest.marker: 'integration and not installed'
        Python37_64_integration:
          python.version: '3.7'
          conda.subdir: 'win-64'
          test.style: 'integration'
          pytest.marker: 'integration and not installed'
    steps:
      # Test suite expectes to reach python and temp folders via relative paths. On Windows, relative paths can only
      #   be constructed when the two folders are on the same drive. This is not guaranteed when using a hosted agent
      #   and, even if it happens to be the case, it could change at anytime. Use junctions to co-locate these folders
      #   and support relative pathing.
      - script: |
          pushd %TEMP%
          mklink /J \conda_bin $(CONDA)
          mklink /J \conda_src $(Build.SourcesDirectory)
        displayName: Link conda and source folders on temp drive
      - script: |
          set CONDA_SUBDIR=$(conda.subdir)
          pushd %TEMP%
          cd \conda_src
          CALL \conda_bin\scripts\activate.bat
          CALL conda create -n ci_base -y python=$(python.version) pycosat conda requests ruamel_yaml pytest pytest-cov pytest-timeout mock responses urllib3 pexpect pywin32 anaconda-client conda-package-handling
          CALL conda activate ci_base
          CALL conda install -yq pip conda-build=3.17 conda-verify
          pip install codecov
          python -m conda init cmd.exe --dev
        displayName: Initialize test environment
      - script: |
          set CONDA_SUBDIR=$(conda.subdir)
          pushd %TEMP%
          cd \conda_src
          CALL dev-init.bat
          CALL conda info -a
          CALL conda-build tests\test-recipes\activate_deactivate_package
          CALL py.test --junitxml=junit/unit-test-results.xml --cov=conda --cov-report=xml --cov-report=html -m "$(pytest.marker)" -v
        displayName: py$(python.version) $(conda.subdir) $(test.style) tests
        
      - task: PublishTestResults@2
        displayName: 'Publish $(test.style) test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/unit-test-*.xml'
          testRunTitle: 'py$(python.version) $(conda.subdir) $(test.style) tests'

      # # Azure Pipelines does not merge coverage files so this is only useful for early dev phase
      # - task: PublishCodeCoverageResults@1
      #   displayName: 'Publish coverage results'
      #   condition: succeededOrFailed()
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      #     reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

      #- script: |
      #    pip install pytest pytest-azurepipelines
      #    pytest
      #  displayName: 'pytest'
